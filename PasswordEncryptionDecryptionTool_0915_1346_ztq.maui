// 代码生成时间: 2025-09-15 13:46:52
 * Requirements:
 * - Code structure should be clear and easy to understand.
 * - Include appropriate error handling.
 * - Add necessary comments and documentation.
 * - Follow C# best practices.
 * - Ensure maintainability and expandability of the code.
 */

using System;
using System.Security.Cryptography;
using System.Text;
using Microsoft.Maui;
using Microsoft.Maui.Controls;
using Microsoft.Maui.Controls.Hosting;
using Microsoft.Maui.Hosting;

namespace PasswordEncryptionDecryptionTool
{
    public static class AesEncryption
    {
        // Encrypts the given plain text using AES algorithm
        public static string Encrypt(string plainText, string key)
        {
            if (string.IsNullOrEmpty(plainText))
                throw new ArgumentException("Plain text cannot be null or empty.");
            if (string.IsNullOrEmpty(key))
                throw new ArgumentException("Key cannot be null or empty.");

            using Aes aesAlg = Aes.Create();
            aesAlg.Key = Encoding.UTF8.GetBytes(key);
            aesAlg.IV = Encoding.UTF8.GetBytes("12345678".PadLeft(16, ' ')); // Use a fixed IV for simplicity

            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);
            using MemoryStream msEncrypt = new MemoryStream();
            using CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write);
            using StreamWriter swEncrypt = new StreamWriter(csEncrypt);

            swEncrypt.Write(plainText);

            return Convert.ToBase64String(msEncrypt.ToArray());
        }

        // Decrypts the given encrypted text using AES algorithm
        public static string Decrypt(string cipherText, string key)
        {
            if (string.IsNullOrEmpty(cipherText))
                throw new ArgumentException("Cipher text cannot be null or empty.");
            if (string.IsNullOrEmpty(key))
                throw new ArgumentException("Key cannot be null or empty.");

            byte[] cipherTextBytes = Convert.FromBase64String(cipherText);
            using Aes aesAlg = Aes.Create();
            aesAlg.Key = Encoding.UTF8.GetBytes(key);
            aesAlg.IV = Encoding.UTF8.GetBytes("12345678".PadLeft(16, ' ')); // Use a fixed IV for simplicity

            ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);
            using MemoryStream msDecrypt = new MemoryStream(cipherTextBytes);
            using CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read);
            using StreamReader srDecrypt = new StreamReader(csDecrypt);

            return srDecrypt.ReadToEnd();
        }
    }

    public class App : Application
    {
        public App()
        {
            var page = new ContentPage
            {
                Content = new StackLayout
                {
                    Children =
                    {
                        new Label { Text = "Enter Password" },
                        new Entry { Placeholder = "Password", AutomationId = "passwordEntry" },
                        new Label { Text = "Encrypted Password" },
                        new Label { AutomationId = "encryptedLabel" },
                        new Label { Text = "Decrypted Password" },
                        new Label { AutomationId = "decryptedLabel" },
                        new Button { Text = "Encrypt", Clicked = (sender, args) => EncryptAction() },
                        new Button { Text = "Decrypt", Clicked = (sender, args) => DecryptAction() }
                    }
                }
            };

            MainPage = page;
        }

        private async void EncryptAction()
        {
            string password = ((Entry) MainPage.FindByName<IElement>("passwordEntry")).Placeholder;
            string encryptedPassword = AesEncryption.Encrypt(password, "YourSecretKey");
            ((Label) MainPage.FindByName<IElement>("encryptedLabel")).Text = encryptedPassword;
        }

        private async void DecryptAction()
        {
            string encryptedPassword = ((Label) MainPage.FindByName<IElement>("encryptedLabel")).Text;
            string decryptedPassword = AesEncryption.Decrypt(encryptedPassword, "YourSecretKey");
            ((Label) MainPage.FindByName<IElement>("decryptedLabel")).Text = decryptedPassword;
        }
    }

    public static class MauiProgram
    {
        public static MauiApp CreateMauiApp()
        {
            var builder = MauiApp.CreateBuilder();
            builder
                .UseMauiApp<App>()
                .ConfigureFonts(fonts =>
                {
                    fonts.AddFont("OpenSans-Regular.ttf", "OpenSansRegular");
                });

            return builder.Build();
        }
    }
}
